@using BioscoopSysteemWeb.Service;
@using BioscoopSysteemWeb.Service.Contracts;
@inject IMailService MailService;
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Wilt u zich inschrijven voor onze nieuwsbrief?</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <input class="form-control" @bind="email">
        <button @onclick="() => signUpEmail(email)" class="btn-primary">
            <Label class="text-black-50">Schrijf in</Label>
        </button>
        <h6>@message</h6>
    </div>
</div>

@code {
    private string? email { get; set; }
    private string? message { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    protected async Task signUpEmail(string email)
    {
        if(email == null)
        {
            message = "geen mail ingegeven probeer opnieuw";
        }
        else
        {
            await MailService.SubscribeEmail(email);
            message = "Success!";
        }

    }


}
