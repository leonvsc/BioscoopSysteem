@page "/"
@inject IMovieService MovieService
@using BioscoopSysteemAPI.DTOs;
@using BioscoopSysteemWeb.Service
@using BioscoopSysteemWeb.Service.LanguageService;
@using Microsoft.Extensions.Localization;
@inject GetTicketInfoService GetTicketInfoService
@inject IStringLocalizer<Index> Localizer
@inject BiosLanguageNotifier BiosLanguageNotifier
@implements IDisposable

<style>

    body {
        background: #f2f2f2;
        font-family: 'Open Sans', sans-serif;
    }

    .search {
        width: 100%;
        display: flex;
    }

    .searchTerm {
        width: 100%;
        border: 3px solid #00B4CC;
        border-right: none;
        padding: 5px;
        height: 20px;
        border-radius: 5px 0 0 5px;
        outline: none;
        color: #9DBFAF;
    }

        .searchTerm:focus {
            color: #00B4CC;
        }

    .searchButton {
        width: 40px;
        height: 36px;
        border: 1px solid #00B4CC;
        background: #00B4CC;
        text-align: center;
        color: #fff;
        border-radius: 0 5px 5px 0;
        cursor: pointer;
        font-size: 20px;
    }

    /*Resize the wrap to see the search bar change!*/
    .wrap {
        width: 30%;
        left: 50%;
        transform: translate(-50%, -50%);
        margin-bottom: 20px;
    }

</style>

<h3>@Localizer["Language"]</h3>
<LanguageSelector />

<h3>FilterBar</h3>
<p>@filter.specials</p>
<div class="wrap">
    <div class="search">
        <input @bind="filter.search" id="search" type="text" class="searchTerm" placeholder="">
        <input @bind="filter.age" id="age" type="number" class="searchTerm" placeholder="">
        <select @bind="filter.genre">
            <option value=""></option>
            <option value="Actie">Actie</option>
            <option value="Avonturen">Avonturen</option>
            <option value="Familie">Familie</option>
            <option value="Fantasy">Fantasy</option>
            <option value="Horror">Horror</option>
            <option value="Komedie">Komedie</option>
            <option value="Misdaad">Misdaad</option>
            <option value="Musical">Musical</option>
            <option value="Muziek">Muziek</option>
            <option value="Thriller">Thriller</option>
            <option value="Romantische">Romantisch</option>
            <option value="Romantische Komedie">Romantische Komedie</option>
            <option value="Sciencefiction">Science Fiction</option>
            <option value="Tragikomedie">TragiKomedie</option>
        </select>
        <select @bind="filter.language">
            <option value=""></option>
            <option value="English">English</option>
            <option value="Nederlands">Nederlands</option>
            <option value="Francais">Francais</option>
        </select>
        <select @bind="filter.specials">
            <option value=""></option>
            <option value="Ladies Night">Ladies Night</option>
            <option value="Horror Night">Horror Night</option>
            <option value="Marathon">Marathon</option>
        </select>
        <input @bind="filter.threeDee" id="threeDee" type="checkbox" class="threeDee" placeholder="">
        <input @bind="filter.subtitles" id="subs" type="checkbox" class="subs" placeholder="">
        <button @onclick="() => Filter()" class="searchButton">
            <i class="fa fa-search"></i>
        </button>
        <button @onclick="() => FilterClear()" class="searchButton">
            <p>clear search</p>
        </button>
    </div>
</div>

<PageTitle>Index</PageTitle>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@Localizer["Order Tickets"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <OrderTickets></OrderTickets>
        </ModalBody>
    </ModalContent>
</Modal>




@if (Films == null)
{
    <h3>@Localizer["Movies are loading"]</h3>
}
else
{


    <div class="container d-flex align-items-center justify-content-center position-relative flex-wrap" style="margin-top:35px;">

        @foreach (var movie in Films)
        {
            <div class="card d-flex position-relative flex-column">
                <div class='imgContainer'>
                    <img src="@movie.ImageUrl">
                </div>
                <h4>@movie.Name</h4>
                <Button Color="Color.Primary" Clicked="@ShowModal">@Localizer["Order Tickets"]</Button>
                <a href="/MovieDetails"><button class="btn btn-primary" @onclick="() => GetTicketInfoService.SetMovieId(movie.MovieId)">@Localizer["More Information"]</button></a>
                @* <a href="/MovieDetails"><Button Color="Color.Primary" Clicked="@SetMovieId(movie.MovieId)">Kaartjes bestellen</Button></a> *@
                <div class="content">
                    <p><strong>@Localizer["Description"]: </strong>@movie.Description</p>
                    <p><strong>@Localizer["Price"]: </strong>@movie.Price</p>
                    <p><strong>@Localizer["Age"]: </strong>@movie.AllowedAge</p>
                </div>
            </div>
        }
    </div>
}



@code {

    protected override void OnInitialized() => BiosLanguageNotifier.SubscribeLanguageChange(this);
    public void Dispose() => BiosLanguageNotifier.UnsubscribeLanguageChange(this);

    EventCallback<string> OnChange { get; set; }


    public IEnumerable<MovieReadDTO>? Films { get; set; }
    private Modal modalRef;

    private FilterDTO filter { get; set; } = new FilterDTO();


    // private void SetMovieId(int movieId)
    // {
    //     GetTicketInfoService.SetMovieId(movieId);
    // }

    protected override async Task OnInitializedAsync()
    {
        Films = await MovieService.GetMovies();
    }
    private async Task FilterClear()
    {
        filter.genre = null;
        filter.threeDee = null;
        filter.specials = null;
        filter.age = null;
        filter.search = null;
        filter.language = null;
        filter.subtitles = null;
        Films = await MovieService.GetMovies();
        await InvokeAsync(() =>
               {
                   StateHasChanged();
               });
    }
    private async Task Filter()
    {
        if(filter.genre == "")
        {
            filter.genre = null;
        }
        if(filter.specials == "")
        {
            filter.specials = null;
        }
        if(filter.language == "")
        {
            filter.language = null;
        }
        Films = await MovieService.GetMovieByFilter(filter);
        
        await InvokeAsync(() =>
               {
                   StateHasChanged();
               });
    }

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
}
